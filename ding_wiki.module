<?php

/**
 * Implementation of hook_init().
 */
function ding_wiki_init() {
  //Add our own stylesheet
  drupal_add_css(drupal_get_path('module', 'ding_wiki') . '/css/ding_wiki.css');
  
  //Add our javascript
  drupal_add_js(drupal_get_path('module', 'ding_wiki') . '/js/jquery.gallerific.js');
  drupal_add_js(drupal_get_path('module', 'ding_wiki') . '/js/ding_wiki.js');
  
  
  global $custom_theme, $user;
 
  if (variable_get('node_admin_theme', 0) && !ding_user_has_secure_role($user)) {
    //Define the types should use the default theme instead of the admin one
    $custom_form_types = array('wiki-page');
 
    $use_custom_theme = false;
 
    //Use default theme when adding types or edit
    $use_custom_theme = (arg(0) == 'node' && arg(1) == 'add' && in_array(arg(2), $custom_form_types));
 
    if (!$use_custom_theme && (arg(0) == 'node' && arg(2) == 'edit')) {
      $node = node_load(arg(1));
      $use_custom_theme = in_array($node->type, $custom_form_types);
    }
 
    //Set the theme 
    if ($use_custom_theme) {
      $custom_theme = variable_get('theme_default', '0');
    }
  }
}


/**
 * Implementation of hook_menu().
 */
function ding_wiki_menu() {
  $items = array();
  
  $items['node/%node/create-wiki-page'] = array(
    'title' => 'Create new wiki page',
    'page callback' => 'drupal_goto',
    'page arguments' => array('node/add/wiki-page'),
    'access callback' => '_ding_wiki_node_is_wiki',
    'access arguments' => array(1),
    'type' => MENU_LOCAL_TASK,
    'weight' => -10, //We need to be before the view tab
  );
  
  return $items;
}

/**
 * Implementation of hook_nodeapi().
 */
function ding_wiki_nodeapi(&$node, $op, $a3 = NULL, $a4 = NULL) {
  // Set default breadcrumb if 
  // - viewing a wiki page node 
  // - on a page by itself
  // - without a menu item
  if (($node->type == 'wiki_page') && 
      ($op == 'view') && !$a3 && $a4) {
    if (!_ding_wiki_in_menu($node)) {
      $trail = array(
        l(t('Home'), '<front>'),
      );
        
      $trail[] = l(t('Wiki'), 'wiki');
  
      $trail[] = l($node->title, 'node/' . $node->nid);
        
      drupal_set_breadcrumb($trail);
    }
  }
}

/**
 * Implementation of hook_theme().
 */
function ding_wiki_theme() {
  $file = drupal_get_path('module', 'ding_wiki') . '/ding_wiki.theme.inc';
  
  $theme = array(
    'ding_wiki_formatter_text' => array(
      'arguments' => array('element' => NULL),
      'template' => 'templates/ting_reference_text',
      'file'	=> $file,
    ),
    'ding_wiki_formatter_mixed' => array(
      'arguments' => array('element' => NULL),
      'file'	=> $file,
    ),
    'ding_wiki_formatter_thumbnail_description' => array(
      'arguments' => array('element' => NULL),
      'file'	=> $file,
    ),
    'ding_wiki_formatter_thumbnail_link_description' => array(
      'arguments' => array('element' => NULL),
      'file'	=> $file,
    ),
  );
  
  return $theme;
}

/**
 * Implementation of hook_theme_registry_alter.
 */
function ding_wiki_theme_registry_alter(&$theme_registry) {
  
  //We provide our own node template for wiki pages so look here as well
  $theme_path = drupal_get_path('module', 'ding_wiki') . '/templates';
  $theme_hooks = array('node', 'content_field');
  foreach ($theme_hooks as $hook) {
    $theme_registry[$hook]['theme paths'][] = $theme_path;
  }
}

function ding_wiki_preprocess_content_field(&$vars) {
  $vars['node_type'] = $vars['node']->type;
  $vars['node_type_css'] = str_replace('_', '-', $vars['node']->type);
  
  // Pass along information whether this is a gallery subpage for a wiki node 
  $vars['wiki_gallery'] = (strrpos($_GET['q'], 'wiki_gallery') !== FALSE);
}

/**
 * Implementation of hook_field_formatter_info().
 */
function ding_wiki_field_formatter_info() {
  $formatters = array(
    'text' => array(
      'label' => t('Simple text'),
      'field types' => array('ting_reference'),
      'multiple values' => CONTENT_HANDLE_CORE,
    ),
    'mixed' => array(
      'label' => t('Combines image and text formatters for multiple values'),
      'field types' => array('ting_reference'),
      'multiple values' => CONTENT_HANDLE_CORE,
    ),
    'thumbnail_description' => array(
    	'label' => t('Ding! wiki thumbnail with description'),
    	'field types' => array('image', 'filefield'),
      'multiple values' => CONTENT_HANDLE_CORE,
    ),
    'thumbnail_link_description' => array(
    	'label' => t('Ding! wiki thumbnail linked to full image with description'),
    	'field types' => array('image', 'filefield'),
      'multiple values' => CONTENT_HANDLE_CORE,
    ),
  );
  
  return $formatters;
}

/**
 * Implementation of hook_form_ID_alter().
 */
function ding_wiki_form_wiki_page_node_form_alter(&$form, &$form_state) {
  global $user;
  
  //Make sure buttons stay at the end
  $form['buttons']['#weight'] = 9999;
  
  if (!ding_user_has_secure_role($user)) {
    //with this 
    unset($form['revision_information']);
    
    //Remove teaser split - this isn't something for users
    unset($form['body_field']['teaser_js']);
    unset($form['body_field']['teaser_include']);

    unset($form['body_field']['format']);
  }
}

/**
 * Implementation of hook_form_ID_alter().
 */
function ding_wiki_form_node_access_page_alter(&$form, &$form_state) {
  //Make Access control lists collapsed by default. They are seldom needed.
  $form['nacl']['#collapsed'] = TRUE;
}

/**
 * Implementation of hook_form_ID_alter().
 */
function ding_wiki_form_comment_form_alter(&$form, &$form_state) {
  // Make the preview comment button disapear
  $form['preview']['#access'] = FALSE;
}

/**
 * Implementation of hook_ctools_plugin_directory().
 */
function ding_wiki_ctools_plugin_directory($owner, $plugin_type) {
  return 'plugins/' . $plugin_type;
}

/**
 * Returns whether a node is a wiki node.
 * 
 * Used as access callback.
 */
function _ding_wiki_node_is_wiki($node) {
  return $node->type == 'wiki_page';
}

/**
 * Determine whether a node has a menu link. 
 * 
 * Used to determine pane visibility.
 */
function _ding_wiki_in_menu($node) {
  return (bool) db_result(db_query("SELECT count(menu_name) as count FROM {menu_links} WHERE link_path = '%s'", 'node/' . $node->nid));
}

/**
 * Determine the menu link id for the root wiki page.
 * 
 * We do not know what menu link id the wiki root panel will obtain
 * so we need to retrieve it for panel configuration at runtime.
 */
function _ding_wiki_root_mlid() {
  return db_result(db_query('SELECT mlid FROM {menu_links} WHERE menu_name = "menu-organisation" AND link_path = "wiki"'));
}

include_once('ding_wiki.features.inc');
